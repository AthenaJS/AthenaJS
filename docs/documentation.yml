toc:
  - name: Games
    description: |
      In AthenaJS, to create a new game, you extend the class Game and:
      * create a Scene, by extending the Scene class
      * in your scene, you add any objects you wants onto the scene
      * set the scene you previously created
      * That's it!
  - Game
  - name: Scenes
    description: |
      Scene is an important part of AthenaJS: much like in a 3D engine, the display is based on the notion of scene.
      In order to have graphical elements into the screen, you first create a Scene, then add objects onto it.
  - Scene
  - name: Maps
    description: |
      These classes handle everything that's related to maps in AthenaJS.
      A map isn't required to create a new game.
  - Map
  - MapEvent
  - name: Objects
    description: |
      In AthenaJS, any graphical objects that can be displayed and moved onto the screen inherits from GfxObject.
      AthenaJS comes with these Objects:
      * BitmapText: a bitmap-based text
      * Menu: a special object that can handle several options      
      * Sprite: an object that can have any number of bitmap based animations
      * Text: a simple text object
      Although they can be instanciated, you should extend one of these objects and instanciate it instead, because most
      objects (for example sprites) and different behaviors, spritesheets, and properties.
  - GfxObject
  - Sprite
  - BitmapText
  - Text
  - Menu
  - name: Behaviors
    description: |
      Behaviors define the way graphical objects move onto the screen, like enemies moving left/right, etc...
      PlayerMove is behavior that is controlled by the player, using keyboard input.
      There are a few built-in behaviors but they can be extended and any behavior can be attached to any graphical object.
  - Behavior
  - GroundMove
  - Path
  - PlayerMove
  - SimpleFall
  - WeaponMove
  - name: Managers
    description: |
      Athena comes with several 'managers':
      * AudioManager: handles audio playback
      * InputManager: handles keyboard/joystick/input events
      * NotificationManager: centralized manager to handle communication events
      * ResourceManager: handles external assets resources
  - AudioManager
  - InputManager
  - ResourceManager
  - name: Core
    description: |
      These classes provide Core functionnality to AthenaJS
  - Dom
  - Deferred